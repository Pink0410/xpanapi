<?php
/**
 * OauthTokenDeviceCodeResponse
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * xpan
 *
 * xpanapi
 *
 * The version of the OpenAPI document: 0.1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * OauthTokenDeviceCodeResponse Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class OauthTokenDeviceCodeResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'oauth_token_device_code_response';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'device_code' => 'string',
        'user_code' => 'string',
        'verification_url' => 'string',
        'qrcode_url' => 'string',
        'expires_in' => 'int',
        'interval' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'device_code' => null,
        'user_code' => null,
        'verification_url' => null,
        'qrcode_url' => null,
        'expires_in' => null,
        'interval' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'device_code' => 'device_code',
        'user_code' => 'user_code',
        'verification_url' => 'verification_url',
        'qrcode_url' => 'qrcode_url',
        'expires_in' => 'expires_in',
        'interval' => 'interval'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'device_code' => 'setDeviceCode',
        'user_code' => 'setUserCode',
        'verification_url' => 'setVerificationUrl',
        'qrcode_url' => 'setQrcodeUrl',
        'expires_in' => 'setExpiresIn',
        'interval' => 'setInterval'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'device_code' => 'getDeviceCode',
        'user_code' => 'getUserCode',
        'verification_url' => 'getVerificationUrl',
        'qrcode_url' => 'getQrcodeUrl',
        'expires_in' => 'getExpiresIn',
        'interval' => 'getInterval'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['device_code'] = isset($data['device_code']) ? $data['device_code'] : null;
        $this->container['user_code'] = isset($data['user_code']) ? $data['user_code'] : null;
        $this->container['verification_url'] = isset($data['verification_url']) ? $data['verification_url'] : null;
        $this->container['qrcode_url'] = isset($data['qrcode_url']) ? $data['qrcode_url'] : null;
        $this->container['expires_in'] = isset($data['expires_in']) ? $data['expires_in'] : null;
        $this->container['interval'] = isset($data['interval']) ? $data['interval'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets device_code
     *
     * @return string|null
     */
    public function getDeviceCode()
    {
        return $this->container['device_code'];
    }

    /**
     * Sets device_code
     *
     * @param string|null $device_code device_code
     *
     * @return self
     */
    public function setDeviceCode($device_code)
    {
        $this->container['device_code'] = $device_code;

        return $this;
    }

    /**
     * Gets user_code
     *
     * @return string|null
     */
    public function getUserCode()
    {
        return $this->container['user_code'];
    }

    /**
     * Sets user_code
     *
     * @param string|null $user_code user_code
     *
     * @return self
     */
    public function setUserCode($user_code)
    {
        $this->container['user_code'] = $user_code;

        return $this;
    }

    /**
     * Gets verification_url
     *
     * @return string|null
     */
    public function getVerificationUrl()
    {
        return $this->container['verification_url'];
    }

    /**
     * Sets verification_url
     *
     * @param string|null $verification_url verification_url
     *
     * @return self
     */
    public function setVerificationUrl($verification_url)
    {
        $this->container['verification_url'] = $verification_url;

        return $this;
    }

    /**
     * Gets qrcode_url
     *
     * @return string|null
     */
    public function getQrcodeUrl()
    {
        return $this->container['qrcode_url'];
    }

    /**
     * Sets qrcode_url
     *
     * @param string|null $qrcode_url qrcode_url
     *
     * @return self
     */
    public function setQrcodeUrl($qrcode_url)
    {
        $this->container['qrcode_url'] = $qrcode_url;

        return $this;
    }

    /**
     * Gets expires_in
     *
     * @return int|null
     */
    public function getExpiresIn()
    {
        return $this->container['expires_in'];
    }

    /**
     * Sets expires_in
     *
     * @param int|null $expires_in expires_in
     *
     * @return self
     */
    public function setExpiresIn($expires_in)
    {
        $this->container['expires_in'] = $expires_in;

        return $this;
    }

    /**
     * Gets interval
     *
     * @return int|null
     */
    public function getInterval()
    {
        return $this->container['interval'];
    }

    /**
     * Sets interval
     *
     * @param int|null $interval interval
     *
     * @return self
     */
    public function setInterval($interval)
    {
        $this->container['interval'] = $interval;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


