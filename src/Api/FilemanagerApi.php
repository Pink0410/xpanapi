<?php
/**
 * FilemanagerApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * xpan
 *
 * xpanapi
 *
 * The version of the OpenAPI document: 0.1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * FilemanagerApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class FilemanagerApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex)
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation filemanagercopy
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://pan.baidu.com
     *
     * @param  string $access_token access_token (required)
     * @param  int $async async (required)
     * @param  string $filelist filelist (required)
     * @param  string $ondup ondup (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function filemanagercopy($access_token, $async, $filelist, $ondup = null)
    {
        $this->filemanagercopyWithHttpInfo($access_token, $async, $filelist, $ondup);
    }

    /**
     * Operation filemanagercopyWithHttpInfo
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://pan.baidu.com
     *
     * @param  string $access_token (required)
     * @param  int $async async (required)
     * @param  string $filelist filelist (required)
     * @param  string $ondup ondup (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function filemanagercopyWithHttpInfo($access_token, $async, $filelist, $ondup = null)
    {
        $request = $this->filemanagercopyRequest($access_token, $async, $filelist, $ondup);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation filemanagercopyAsync
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://pan.baidu.com
     *
     * @param  string $access_token (required)
     * @param  int $async async (required)
     * @param  string $filelist filelist (required)
     * @param  string $ondup ondup (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function filemanagercopyAsync($access_token, $async, $filelist, $ondup = null)
    {
        return $this->filemanagercopyAsyncWithHttpInfo($access_token, $async, $filelist, $ondup)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation filemanagercopyAsyncWithHttpInfo
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://pan.baidu.com
     *
     * @param  string $access_token (required)
     * @param  int $async async (required)
     * @param  string $filelist filelist (required)
     * @param  string $ondup ondup (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function filemanagercopyAsyncWithHttpInfo($access_token, $async, $filelist, $ondup = null)
    {
        $returnType = '';
        $request = $this->filemanagercopyRequest($access_token, $async, $filelist, $ondup);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'filemanagercopy'
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://pan.baidu.com
     *
     * @param  string $access_token (required)
     * @param  int $async async (required)
     * @param  string $filelist filelist (required)
     * @param  string $ondup ondup (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function filemanagercopyRequest($access_token, $async, $filelist, $ondup = null)
    {
        // verify the required parameter 'access_token' is set
        if ($access_token === null || (is_array($access_token) && count($access_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $access_token when calling filemanagercopy'
            );
        }
        // verify the required parameter 'async' is set
        if ($async === null || (is_array($async) && count($async) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $async when calling filemanagercopy'
            );
        }
        // verify the required parameter 'filelist' is set
        if ($filelist === null || (is_array($filelist) && count($filelist) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $filelist when calling filemanagercopy'
            );
        }

        $resourcePath = '/rest/2.0/xpan/file?method=filemanager&opera=copy&openapi=xpansdk';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $access_token,
            'access_token', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?: []);



        // form params
        if ($async !== null) {
            $formParams['async'] = ObjectSerializer::toFormValue($async);
        }
        // form params
        if ($filelist !== null) {
            $formParams['filelist'] = ObjectSerializer::toFormValue($filelist);
        }
        // form params
        if ($ondup !== null) {
            $formParams['ondup'] = ObjectSerializer::toFormValue($ondup);
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHosts = ["https://pan.baidu.com"];
        if ($this->hostIndex < 0 || $this->hostIndex >= sizeof($operationHosts)) {
            throw new \InvalidArgumentException("Invalid index {$this->hostIndex} when selecting the host. Must be less than ".sizeof($operationHosts));
        }
        $operationHost = $operationHosts[$this->hostIndex];

        $query = ObjectSerializer::buildQuery($queryParams);

        $separator = '?';
        if (strchr($resourcePath, "?") !== false) {
            $separator = '&';
        }
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "{$separator}{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation filemanagerdelete
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://pan.baidu.com
     *
     * @param  string $access_token access_token (required)
     * @param  int $async async (required)
     * @param  string $filelist filelist (required)
     * @param  string $ondup ondup (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function filemanagerdelete($access_token, $async, $filelist, $ondup = null)
    {
        $this->filemanagerdeleteWithHttpInfo($access_token, $async, $filelist, $ondup);
    }

    /**
     * Operation filemanagerdeleteWithHttpInfo
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://pan.baidu.com
     *
     * @param  string $access_token (required)
     * @param  int $async async (required)
     * @param  string $filelist filelist (required)
     * @param  string $ondup ondup (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function filemanagerdeleteWithHttpInfo($access_token, $async, $filelist, $ondup = null)
    {
        $request = $this->filemanagerdeleteRequest($access_token, $async, $filelist, $ondup);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation filemanagerdeleteAsync
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://pan.baidu.com
     *
     * @param  string $access_token (required)
     * @param  int $async async (required)
     * @param  string $filelist filelist (required)
     * @param  string $ondup ondup (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function filemanagerdeleteAsync($access_token, $async, $filelist, $ondup = null)
    {
        return $this->filemanagerdeleteAsyncWithHttpInfo($access_token, $async, $filelist, $ondup)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation filemanagerdeleteAsyncWithHttpInfo
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://pan.baidu.com
     *
     * @param  string $access_token (required)
     * @param  int $async async (required)
     * @param  string $filelist filelist (required)
     * @param  string $ondup ondup (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function filemanagerdeleteAsyncWithHttpInfo($access_token, $async, $filelist, $ondup = null)
    {
        $returnType = '';
        $request = $this->filemanagerdeleteRequest($access_token, $async, $filelist, $ondup);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'filemanagerdelete'
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://pan.baidu.com
     *
     * @param  string $access_token (required)
     * @param  int $async async (required)
     * @param  string $filelist filelist (required)
     * @param  string $ondup ondup (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function filemanagerdeleteRequest($access_token, $async, $filelist, $ondup = null)
    {
        // verify the required parameter 'access_token' is set
        if ($access_token === null || (is_array($access_token) && count($access_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $access_token when calling filemanagerdelete'
            );
        }
        // verify the required parameter 'async' is set
        if ($async === null || (is_array($async) && count($async) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $async when calling filemanagerdelete'
            );
        }
        // verify the required parameter 'filelist' is set
        if ($filelist === null || (is_array($filelist) && count($filelist) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $filelist when calling filemanagerdelete'
            );
        }

        $resourcePath = '/rest/2.0/xpan/file?method=filemanager&opera=delete&openapi=xpansdk';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $access_token,
            'access_token', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?: []);



        // form params
        if ($async !== null) {
            $formParams['async'] = ObjectSerializer::toFormValue($async);
        }
        // form params
        if ($filelist !== null) {
            $formParams['filelist'] = ObjectSerializer::toFormValue($filelist);
        }
        // form params
        if ($ondup !== null) {
            $formParams['ondup'] = ObjectSerializer::toFormValue($ondup);
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHosts = ["https://pan.baidu.com"];
        if ($this->hostIndex < 0 || $this->hostIndex >= sizeof($operationHosts)) {
            throw new \InvalidArgumentException("Invalid index {$this->hostIndex} when selecting the host. Must be less than ".sizeof($operationHosts));
        }
        $operationHost = $operationHosts[$this->hostIndex];

        $query = ObjectSerializer::buildQuery($queryParams);

        $separator = '?';
        if (strchr($resourcePath, "?") !== false) {
            $separator = '&';
        }
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "{$separator}{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation filemanagermove
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://pan.baidu.com
     *
     * @param  string $access_token access_token (required)
     * @param  int $async async (required)
     * @param  string $filelist filelist (required)
     * @param  string $ondup ondup (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function filemanagermove($access_token, $async, $filelist, $ondup = null)
    {
        $this->filemanagermoveWithHttpInfo($access_token, $async, $filelist, $ondup);
    }

    /**
     * Operation filemanagermoveWithHttpInfo
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://pan.baidu.com
     *
     * @param  string $access_token (required)
     * @param  int $async async (required)
     * @param  string $filelist filelist (required)
     * @param  string $ondup ondup (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function filemanagermoveWithHttpInfo($access_token, $async, $filelist, $ondup = null)
    {
        $request = $this->filemanagermoveRequest($access_token, $async, $filelist, $ondup);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation filemanagermoveAsync
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://pan.baidu.com
     *
     * @param  string $access_token (required)
     * @param  int $async async (required)
     * @param  string $filelist filelist (required)
     * @param  string $ondup ondup (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function filemanagermoveAsync($access_token, $async, $filelist, $ondup = null)
    {
        return $this->filemanagermoveAsyncWithHttpInfo($access_token, $async, $filelist, $ondup)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation filemanagermoveAsyncWithHttpInfo
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://pan.baidu.com
     *
     * @param  string $access_token (required)
     * @param  int $async async (required)
     * @param  string $filelist filelist (required)
     * @param  string $ondup ondup (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function filemanagermoveAsyncWithHttpInfo($access_token, $async, $filelist, $ondup = null)
    {
        $returnType = '';
        $request = $this->filemanagermoveRequest($access_token, $async, $filelist, $ondup);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'filemanagermove'
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://pan.baidu.com
     *
     * @param  string $access_token (required)
     * @param  int $async async (required)
     * @param  string $filelist filelist (required)
     * @param  string $ondup ondup (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function filemanagermoveRequest($access_token, $async, $filelist, $ondup = null)
    {
        // verify the required parameter 'access_token' is set
        if ($access_token === null || (is_array($access_token) && count($access_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $access_token when calling filemanagermove'
            );
        }
        // verify the required parameter 'async' is set
        if ($async === null || (is_array($async) && count($async) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $async when calling filemanagermove'
            );
        }
        // verify the required parameter 'filelist' is set
        if ($filelist === null || (is_array($filelist) && count($filelist) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $filelist when calling filemanagermove'
            );
        }

        $resourcePath = '/rest/2.0/xpan/file?method=filemanager&opera=move&openapi=xpansdk';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $access_token,
            'access_token', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?: []);



        // form params
        if ($async !== null) {
            $formParams['async'] = ObjectSerializer::toFormValue($async);
        }
        // form params
        if ($filelist !== null) {
            $formParams['filelist'] = ObjectSerializer::toFormValue($filelist);
        }
        // form params
        if ($ondup !== null) {
            $formParams['ondup'] = ObjectSerializer::toFormValue($ondup);
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHosts = ["https://pan.baidu.com"];
        if ($this->hostIndex < 0 || $this->hostIndex >= sizeof($operationHosts)) {
            throw new \InvalidArgumentException("Invalid index {$this->hostIndex} when selecting the host. Must be less than ".sizeof($operationHosts));
        }
        $operationHost = $operationHosts[$this->hostIndex];

        $query = ObjectSerializer::buildQuery($queryParams);

        $separator = '?';
        if (strchr($resourcePath, "?") !== false) {
            $separator = '&';
        }
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "{$separator}{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation filemanagerrename
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://pan.baidu.com
     *
     * @param  string $access_token access_token (required)
     * @param  int $async async (required)
     * @param  string $filelist filelist (required)
     * @param  string $ondup ondup (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function filemanagerrename($access_token, $async, $filelist, $ondup = null)
    {
        $this->filemanagerrenameWithHttpInfo($access_token, $async, $filelist, $ondup);
    }

    /**
     * Operation filemanagerrenameWithHttpInfo
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://pan.baidu.com
     *
     * @param  string $access_token (required)
     * @param  int $async async (required)
     * @param  string $filelist filelist (required)
     * @param  string $ondup ondup (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function filemanagerrenameWithHttpInfo($access_token, $async, $filelist, $ondup = null)
    {
        $request = $this->filemanagerrenameRequest($access_token, $async, $filelist, $ondup);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation filemanagerrenameAsync
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://pan.baidu.com
     *
     * @param  string $access_token (required)
     * @param  int $async async (required)
     * @param  string $filelist filelist (required)
     * @param  string $ondup ondup (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function filemanagerrenameAsync($access_token, $async, $filelist, $ondup = null)
    {
        return $this->filemanagerrenameAsyncWithHttpInfo($access_token, $async, $filelist, $ondup)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation filemanagerrenameAsyncWithHttpInfo
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://pan.baidu.com
     *
     * @param  string $access_token (required)
     * @param  int $async async (required)
     * @param  string $filelist filelist (required)
     * @param  string $ondup ondup (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function filemanagerrenameAsyncWithHttpInfo($access_token, $async, $filelist, $ondup = null)
    {
        $returnType = '';
        $request = $this->filemanagerrenameRequest($access_token, $async, $filelist, $ondup);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'filemanagerrename'
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://pan.baidu.com
     *
     * @param  string $access_token (required)
     * @param  int $async async (required)
     * @param  string $filelist filelist (required)
     * @param  string $ondup ondup (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function filemanagerrenameRequest($access_token, $async, $filelist, $ondup = null)
    {
        // verify the required parameter 'access_token' is set
        if ($access_token === null || (is_array($access_token) && count($access_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $access_token when calling filemanagerrename'
            );
        }
        // verify the required parameter 'async' is set
        if ($async === null || (is_array($async) && count($async) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $async when calling filemanagerrename'
            );
        }
        // verify the required parameter 'filelist' is set
        if ($filelist === null || (is_array($filelist) && count($filelist) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $filelist when calling filemanagerrename'
            );
        }

        $resourcePath = '/rest/2.0/xpan/file?method=filemanager&opera=rename&openapi=xpansdk';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $access_token,
            'access_token', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?: []);



        // form params
        if ($async !== null) {
            $formParams['async'] = ObjectSerializer::toFormValue($async);
        }
        // form params
        if ($filelist !== null) {
            $formParams['filelist'] = ObjectSerializer::toFormValue($filelist);
        }
        // form params
        if ($ondup !== null) {
            $formParams['ondup'] = ObjectSerializer::toFormValue($ondup);
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHosts = ["https://pan.baidu.com"];
        if ($this->hostIndex < 0 || $this->hostIndex >= sizeof($operationHosts)) {
            throw new \InvalidArgumentException("Invalid index {$this->hostIndex} when selecting the host. Must be less than ".sizeof($operationHosts));
        }
        $operationHost = $operationHosts[$this->hostIndex];

        $query = ObjectSerializer::buildQuery($queryParams);

        $separator = '?';
        if (strchr($resourcePath, "?") !== false) {
            $separator = '&';
        }
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "{$separator}{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
